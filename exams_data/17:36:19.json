{
    "0": {
        "domanda-immagine": "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\nQmCC\n",
        "domanda": "Si consideri la seguente Markov Chain:\n\n\nQuale dei seguenti modelli Modelica fornisce un modello ragionevole per la Markov Chain di cui sopra?",
        "scelte": [
            "1.\nmodel System\nparameter Integer F1 = 1;\nparameter Integer F2 = 2;\nparameter Integer F3 = 3;\nparameter Integer End = 4;\nparameter Real p = 0.3;\nparameter Real A[4, 4] =\n[\np, 0, 1-p, 0;\n0, p, 1-p, 0;\np, 0, 0, 1-p;\n0, 0, 0, 1\n];\nInteger x;  Real r1024;\nInteger state1024[Modelica.Math.Random.Generators.Xorshift1024star.nState];\nalgorithm\nwhen initial() then\nstate1024 := Modelica.Math.Random.Generators.Xorshift1024star.initialState(614657, 30020);\nx := F1;\nr1024 := 0;\nelsewhen sample(0,1) then\n(r1024,state1024) := Modelica.Math.Random.Generators.Xorshift1024star.random(pre(state1024));\nif (r1024 <= A[x, F1]) then\n x := F1;\n elseif (r1024 <= A[x, F1] + A[x, F2]) then\n x := F2;\n elseif (r1024 <= A[x, F1] + A[x, F2] + A[x, F3]) then\n x := F3;\n else\n x := End;\nend if;\nend when;\nend System;",
            "2.\n\nmodel System\nparameter Integer F1 = 1;\nparameter Integer F2 = 2;\nparameter Integer F3 = 3;\nparameter Integer End = 4;\nparameter Real p = 0.3;\nparameter Real A[4, 4] =\n[\np, 0 , 1-p, 0;\np, 1-p, 0, 0;\np, 0, 0, 1-p;\n0, 0, 0, 1\n];\nInteger x;  Real r1024;\nInteger state1024[Modelica.Math.Random.Generators.Xorshift1024star.nState];\nalgorithm\nwhen initial() then\nstate1024 := Modelica.Math.Random.Generators.Xorshift1024star.initialState(614657, 30020);\nx := F1;\nr1024 := 0;\nelsewhen sample(0,1) then\n(r1024,state1024) := Modelica.Math.Random.Generators.Xorshift1024star.random(pre(state1024));\nif (r1024 <= A[x, F1]) then\n x := F1;\n elseif (r1024 <= A[x, F1] + A[x, F2]) then\n x := F2;\n elseif (r1024 <= A[x, F1] + A[x, F2] + A[x, F3]) then\n x := F3;\n else\n x := End;\nend if;\nend when;\nend System;",
            "3.\n\nmodel System\nparameter Integer F1 = 1;\nparameter Integer F2 = 2;\nparameter Integer F3 = 3;\nparameter Integer End = 4;\nparameter Real p = 0.3;\nparameter Real A[4, 4] =\n[\np, 1-p, 0, 0;\np, 0, 1-p, 0;\np, 0, 0, 1-p;\n0, 0, 0, 1\n];\nInteger x;  Real r1024;\nInteger state1024[Modelica.Math.Random.Generators.Xorshift1024star.nState];\nalgorithm\nwhen initial() then\n   state1024 := Modelica.Math.Random.Generators.Xorshift1024star.initialState(614657, 30020);\n   x := F1;\n   r1024 := 0;\nelsewhen sample(0,1) then\n(r1024,state1024) := Modelica.Math.Random.Generators.Xorshift1024star.random(pre(state1024));\nif (r1024 <= A[x, F1]) then\n x := F1;\n elseif (r1024 <= A[x, F1] + A[x, F2]) then\n x := F2;\n elseif (r1024 <= A[x, F1] + A[x, F2] + A[x, F3]) then\n x := F3;\n else\n x := End;\nend if;\nend when;\nend System;"
        ],
        "risposta": "The correct answer is:\n\nmodel System\nparameter Integer F1 = 1;\n\nparameter Integer F2 = 2;\nparameter Integer F3 = 3;\nparameter Integer End = 4;\nparameter Real p = 0.3;\nparameter Real A[4, 4] =\n\n[\np, 1-p, 0, 0;\np, 0, 1-p, 0;\np, 0, 0, 1-p;\n0, 0, 0, 1\n];\nInteger x;  Real r1024;\nInteger state1024[Modelica.Math.Random.Generators.Xorshift1024star.nState];\nalgorithm\n\nwhen initial() then\n\n   state1024 := Modelica.Math.Random.Generators.Xorshift1024star.initialState(614657, 30020);\n   x := F1;\n   r1024 := 0;\nelsewhen sample(0,1) then\n(r1024,state1024) := Modelica.Math.Random.Generators.Xorshift1024star.random(pre(state1024));\nif (r1024 <= A[x, F1]) then\n\n x := F1;\n elseif (r1024 <= A[x, F1] + A[x, F2]) then\n x := F2;\n elseif (r1024 <= A[x, F1] + A[x, F2] + A[x, F3]) then\n x := F3;\n else\n x := End;\nend if;\nend when;\n\nend System;"
    },
    "1": {
        "domanda": "Quale delle seguenti frasi meglio descrive il criterio di \"requirements verifiability\" che \u00e8 parte della \"requirements validation activity\".",
        "scelte": [
            "1.\nPer ciascuna componente del sistema, dovremmo essere in grado di scrivere un insieme di test che pu\u00f2 dimostrare che essa soddisfa tutti i requisiti.",
            "2.\nPer ciascuna coppia di componenti, dovremmo essere in grado di scrivere un insieme di test che pu\u00f2 dimostrare che l'interazione tra le componenti soddisfa tutti i requisiti di interfaccia.",
            "3.\nPer ciascun requisito, dovremmo essere in grado di scrivere un inseme di test che pu\u00f2 dimostrare che il sistema sviluppato soddisfa il requisito considerato."
        ],
        "risposta": "The correct answer is: Per ciascun requisito, dovremmo essere in grado di scrivere un inseme di test che pu\u00f2 dimostrare che il sistema sviluppato soddisfa il requisito considerato."
    },
    "2": {
        "domanda": "Un I/O buffer \u00e8 alimentato da una componente che fornisce un input periodico di periodo 2 secondi. Durante la prima met\u00e0 del periodo, l'input rate \u00e8 2MB/s mentre durante la seconda met\u00e0 del periodo l'input rate \u00e8 0. Quindi l'input rate medio \u00e8 di 1MB/s. L' I/O buffer, a sua volta, alimenta una componente che richiede (in media) 1MB/s. Quale dei seguenti modelli Modelica  \u00e8 un modello ragionevole per il sistema descritto sopra ?",
        "scelte": [
            "1.\n\nclass System\nReal x; // MB in buffer\nReal u; // input pulse\ninitial equation\nx = 3;\nu = 0;\nequation\nwhen sample(0, 1) then\n  u = 1 - pre(u);\nend when;\nder(x) = 2*u + 1.0;\nend System;",
            "2.\n\nclass System\nReal x; // MB in buffer\nReal u; // input pulse\ninitial equation\nx = 3;\nu = 0;\nequation\nwhen sample(0, 1) then\n  u = 1 - pre(u);\nend when;\nder(x) = 2*u - 1.0;\nend System;",
            "3.\n\nclass System\nReal x; // MB in buffer\nReal u; // input pulse\ninitial equation\nx = 3;\nu = 0;\nequation\nwhen sample(0, 1) then\n  u = 1 - pre(u);\nend when;\nder(x) = 2*u - 2.0;\nend System;"
        ],
        "risposta": "The correct answer is:\n\nclass System\nReal x; // MB in buffer\nReal u; // input pulse\ninitial equation\nx = 3;\nu = 0;\nequation\nwhen sample(0, 1) then\n\n  u = 1 - pre(u);\nend when;\nder(x) = 2*u - 1.0;\n\nend System;"
    },
    "3": {
        "domanda": "Quale delle seguenti affermazioni \u00e8 vera riguardo all'alpha testing ?",
        "scelte": [
            "1.\nTest automatizzati sono eseguiti sulla prima release del sistema.",
            "2.\nTest automatizzati sono eseguiti su una versione preliminare del sistema.",
            "3.\nGli utenti del sistema lavorano insieme al team di sviluppo per testare il software nel sito di sviluppo."
        ],
        "risposta": "The correct answer is: Gli utenti del sistema lavorano insieme al team di sviluppo per testare il software nel sito di sviluppo."
    },
    "4": {
        "domanda": "Unit testing si concentra su:",
        "scelte": [
            "1.\nTestare funzionalit\u00e0 di unit\u00e0 software individuali, oggetti, classi o metodi.",
            "2.\nTestare l'interazione tra componenti.",
            "3.\nTestare le interfacce di ciascuna componente."
        ],
        "risposta": "The correct answer is: Testare funzionalit\u00e0 di unit\u00e0 software individuali, oggetti, classi o metodi."
    },
    "5": {
        "domanda": "Si consideri il seguente requisito:\nRQ:  Dopo 60 unit\u00e0 di tempo dall'inizio dell'esecuzione vale la seguente propriet\u00e0:\nse 10 unit\u00e0 di tempo nel passato x era maggiore di 0 allora ora y \u00e8 negativa.\nTenendo presente che, al tempo time, delay(z, w) ritorna 0 se time <= w e ritorna il valore che z aveva al tempo (time - w), se time = w.\nQuale dei seguenti monitor meglio descrive il requisito RQ ?",
        "scelte": [
            "1.\nclass Monitor\nInputReal x, y; \nOutputBoolean wy;\nBoolean wz;\ninitial equation\nwy = false;\nequation\nwz = (time > 60) and (delay(x, 10) <= 0) and (y >= 0);\nalgorithm\nwhen edge(wz) then\nwy := true;\nend when;\nend Monitor;",
            "2.\nclass Monitor\nInputReal x, y; \nOutputBoolean wy;\nBoolean wz;\ninitial equation\nwy = false;\nequation\nwz = (time > 60) or (delay(x, 10) > 0) or  (y >= 0);\n\nalgorithm\nwhen edge(wz) then\nwy := true;\nend when;\nend Monitor;",
            "3.\nclass Monitor\nInputReal x, y; \nOutputBoolean wy;\nBoolean wz;\ninitial equation\nwy = false;\nequation\nwz = (time > 60) and (delay(x, 10) > 0) and (y >= 0);\nalgorithm\nwhen edge(wz) then\nwy := true;\nend when;\nend Monitor;"
        ],
        "risposta": "The correct answer is: class Monitor\nInputReal x, y; \nOutputBoolean wy;\nBoolean wz;\ninitial equation\nwy = false;\nequation\nwz = (time > 60) and (delay(x, 10) > 0) and (y >= 0);\nalgorithm\nwhen edge(wz) then\nwy := true;\nend when;\nend Monitor;"
    },
    "6": {
        "domanda": "Si consideri il seguente requisito:\nRQ:  Dopo 40 unit\u00e0 di tempo dall'inizio dell'esecuzione vale la seguente propriet\u00e0:\nse 10 unit\u00e0 di tempo nel passato x era maggiore di 1 allora ora y \u00e8 nonegativa.\nTenendo presente che, al tempo time, delay(z, w) ritorna 0 se time <= w e ritorna il valore che z aveva al tempo (time - w), se time = w.\nQuale dei seguenti monitor meglio descrive il requisito RQ ?",
        "scelte": [
            "1.\nclass Monitor\nInputReal x, y; \nOutputBoolean wy;\nBoolean wz;\ninitial equation\nwy = false;\nequation\nwz = (time > 40) and (delay(x, 10) > 1) and (y < 0);\nalgorithm\nwhen edge(wz) then\nwy := true;\nend when;\nend Monitor;",
            "2.\nclass Monitor\nInputReal x, y; \nOutputBoolean wy;\nBoolean wz;\ninitial equation\nwy = false;\nequation\nwz = (time > 40) and (delay(x, 10) > 1) and (y >= 0);\nalgorithm\nwhen edge(wz) then\nwy := true;\nend when;\nend Monitor;",
            "3.\nclass Monitor\nInputReal x, y; \nOutputBoolean wy;\nBoolean wz;\ninitial equation\nwy = false;\nequation\nwz = (time > 40) or (delay(x, 10) > 1) or (y < 0);\nalgorithm\nwhen edge(wz) then\nwy := true;\nend when;\nend Monitor;"
        ],
        "risposta": "The correct answer is: class Monitor\nInputReal x, y; \nOutputBoolean wy;\nBoolean wz;\ninitial equation\nwy = false;\nequation\nwz = (time > 40) and (delay(x, 10) > 1) and (y < 0);\nalgorithm\nwhen edge(wz) then\nwy := true;\nend when;\nend Monitor;"
    },
    "7": {
        "domanda": "Un'azienda decide di organizzare il processo di sviluppo di un grosso software in 101 phasi sequenziali, numerate da 0 a 100. La phase 0 \u00e8 quella iniziale. La phase 100 \u00e8 quella finale in cui lo sviluppo \u00e8 completato. Tutte le fasi hanno circa la stessa durata.\nSi decide di realizzare un approccio incrementale in cui, alla fine di ogni fase, si passa alla fase successiva solo nel caso in cui tutti i test per la fase vengono superati. In caso contrario bisogna ripetere la phase. Dai dati storici \u00e8 noto che la probabilit\u00e0 che il team di sviluppo passi da una fase a quella successiva \u00e8 0.8.\nAllo scopo di stimare attraverso una simulazione MonteCarlo il valore atteso del tempo di completamento del progetto viene realizzato un modello Modelica  delo processo di sviluppo descritto sopra.\nQuale dei seguenti modelli Modelica modella correttamente il processo di sviluppo descritto sopra?",
        "scelte": [
            "1.\nblock MarkovChain\n//external function myrandom() returns a random real number in [0, 1]\nparameter Integer x0 = 0;\nparameter Integer xmax = 100;\nOutputInteger x;      // Connector\nalgorithm\nwhen initial() then\nx := x0;\nelsewhen sample(0, 1) then\nif (x < xmax)\nthen\n     if (myrandom() <= 0.8)\n     then\n        x := x + 1;\n     else\n        x := x - 1;\n     end if;\nend if;\nend when;\nend MarkovChain;",
            "2.\nblock MarkovChain\n//external function myrandom() returns a random real number in [0, 1]\nparameter Integer x0 = 0;\nparameter Integer xmax = 100;\nOutputInteger x;      // Connector\nalgorithm\nwhen initial() then\nx := x0;\nelsewhen sample(0, 1) then\nif (x < xmax)\nthen\n     if (myrandom() <= 0.8)\n     then\n    x := x + 1;\n     end if;\nend if;\nend when;\nend MarkovChain;",
            "3.\nblock MarkovChain\n//external function myrandom() returns a random real number in [0, 1]\nparameter Integer x0 = 0;\nparameter Integer xmax = 100;\nOutputInteger x;      // Connector\nalgorithm\nwhen initial() then\nx := x0;\nelsewhen sample(0, 1) then\nif (x < xmax)\nthen\n     if (myrandom() >= 0.8)\n     then\n    x := x + 1;\n     end if;\nend if;\nend when;\nend MarkovChain;"
        ],
        "risposta": "The correct answer is: block MarkovChain\n//external function myrandom() returns a random real number in [0, 1]\nparameter Integer x0 = 0;\nparameter Integer xmax = 100;\nOutputInteger x;      // Connector\nalgorithm\nwhen initial() then\nx := x0;\nelsewhen sample(0, 1) then\nif (x < xmax)\nthen\n     if (myrandom() <= 0.8)\n     then\n    x := x + 1;\n     end if;\nend if;\nend when;\nend MarkovChain;"
    },
    "8": {
        "domanda": "Quale delle seguenti affermazione \u00e8 vera riguardo al beta testing ?",
        "scelte": [
            "1.\nUna release del software \u00e8 resa disponibile agli utenti (beta users) per permettergli di sperimentare e quindi segnalare eventuali problemi rilevati agli sviluppatori.",
            "2.\nTest automatizzato sono eseguiti sulla versione finale del sistema presso il cliente.",
            "3.\nTest automatizzato sono eseguiti sulla versione finale del sistema presso il sito di sviluppo del software."
        ],
        "risposta": "The correct answer is: Una release del software \u00e8 resa disponibile agli utenti (beta users) per permettergli di sperimentare e quindi segnalare eventuali problemi rilevati agli sviluppatori."
    },
    "9": {
        "domanda": "L'input di un sistema software \u00e8 costituito da una sequenza di 0 (false) ed 1 (true). Ad uno 0 segue un 1 ed ad un 1 segue uno 0. Il tempo tra un valore di input e l'altro \u00e8 un valore random compreso tra 1 e 10 unit\u00e0 di tempo.\nQuale dei seguenti modelli Modelica modella meglio l'environment descritto sopra.",
        "scelte": [
            "1.\nblock MarkovChain\n//external function myrandom() returns a random real number in [0, 1]\nparameter Real x0 = 0;\nOutputReal x;\nInteger countdown;\nalgorithm\nwhen initial() then\n  x := x0;\n  countdown := 0;\nelsewhen sample(0, 10) then\n  if (countdown <= 0)\n  then\n    countdown := 1 + integer(floor(myrandom()));\n    x := 1 - pre(x);\n  else\n    countdown := countdown - 1;\n  end if;\nend when;\nend MarkovChain;",
            "2.\nblock MarkovChain\n//external function myrandom() returns a random real number in [0, 1]\nparameter Real x0 = 0;\nOutputReal x;\nInteger countdown;\nalgorithm\nwhen initial() then\n  x := x0;\n  countdown := 0;\nelsewhen sample(0, 1) then\n  if (countdown >= 0)\n  then\n    countdown := 1 + integer(floor(10*myrandom()));\n    x := 1 - pre(x);\n  else\n    countdown := countdown - 1;\n  end if;\nend when;\nend MarkovChain;",
            "3.\nblock MarkovChain\n//external function myrandom() returns a random real number in [0, 1]\nparameter Real x0 = 0;\nOutputReal x;\nInteger countdown;\nalgorithm\nwhen initial() then\n  x := x0;\n  countdown := 0;\nelsewhen sample(0, 1) then\n  if (countdown <= 0)\n  then\n    countdown := 1 + integer(floor(10*myrandom()));\n    x := 1 - pre(x);\n  else\n    countdown := countdown - 1;\n  end if;\nend when;\nend MarkovChain;"
        ],
        "risposta": "The correct answer is: block MarkovChain\n//external function myrandom() returns a random real number in [0, 1]\nparameter Real x0 = 0;\nOutputReal x;\nInteger countdown;\nalgorithm\nwhen initial() then\n  x := x0;\n  countdown := 0;\nelsewhen sample(0, 1) then\n  if (countdown <= 0)\n  then\n    countdown := 1 + integer(floor(10*myrandom()));\n    x := 1 - pre(x);\n  else\n    countdown := countdown - 1;\n  end if;\nend when;\nend MarkovChain;"
    },
    "10": {
        "domanda": "Il component testing si concentra su:",
        "scelte": [
            "1.\nTestare le interfacce per ciascun componente.",
            "2.\nTestare l'interazione tra molte componenti (cio\u00e8 integrazione di molte unit\u00e0).",
            "3.\nTestare funzionalit\u00e0 di unit\u00e0 software individuali, oggetti, classi o metodi."
        ],
        "risposta": "The correct answer is: Testare le interfacce per ciascun componente."
    },
    "11": {
        "domanda": "Si consideri il seguente modello Modelica.\nclass System\nBoolean x;\ninitial equation\nx = false;\nequation\nwhen sample(0, 2) then\n    x = not (pre(x));\nend when;\nend System;\nQuale delle seguenti affermazioni vale per la variabile booleana x ?",
        "scelte": [
            "1.\nAt time instants of form 1 + 4*k (with k = 0, 1, 2, 3, ...) x takes value \"false\".",
            "2.\nAd ogni istante di tempo della forma 3 + 4*k (k = 0, 1, 2, 3, ...), x vale \"true\".",
            "3.\nAd ogni istante di tempo della forma 1 + 4*k (k = 0, 1, 2, 3, ...), x vale \"true\"."
        ],
        "risposta": "The correct answer is: Ad ogni istante di tempo della forma 1 + 4*k (k = 0, 1, 2, 3, ...), x vale \"true\"."
    },
    "12": {
        "domanda": "\"Ogni giorno, per ciascuna clinica, il sistema generer\u00e0 una lista dei pazienti che hanno un appuntamento quel giorno.\"\nLa frase precedente \u00e8 un esempio di:",
        "scelte": [
            "1.\nRequisito funzionale. ",
            "2.\nRequisito non-funzionale. ",
            "3.\nRequisito di performance. "
        ],
        "risposta": "The correct answer is: Requisito funzionale. "
    },
    "13": {
        "domanda-immagine": "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\n",
        "domanda": "Si consideri l'automa segunete:\n\n\nQuale dei seguenti modelli Modelica fornisce un modello ragionevole per l'automa di cui sopra.",
        "scelte": [
            "1.\n\nfunction next\ninput Integer x;\noutput Integer y;\nalgorithm\n   y := 1 + x;\nend next;\n\nclass System\nInteger x;\ninitial equation\nx = 0;\nequation\nwhen sample(0, 1) then\n    x = next(pre(x));\nend when;\nend System;",
            "2.\n\nfunction next\ninput Integer x;\noutput Integer y;\nalgorithm\n   y := x;\nend next;\n\nclass System\nInteger x;\ninitial equation\nx = 0;\nequation\nwhen sample(0, 1) then\n    x = next(pre(x));\nend when;\nend System;",
            "3.\n\nfunction next\ninput Integer x;\noutput Integer y;\nalgorithm\n   y := 1 - x;\nend next;\n\nclass System\nInteger x;\ninitial equation\nx = 0;\nequation\nwhen sample(0, 1) then\n    x = next(pre(x));\nend when;\nend System;"
        ],
        "risposta": "The correct answer is:\n\nfunction next\ninput Integer x;\noutput Integer y;\nalgorithm\n   y := 1 - x;\nend next;\n\n\nclass System\nInteger x;\ninitial equation\nx = 0;\nequation\nwhen sample(0, 1) then\n    x = next(pre(x));\nend when;\nend System;"
    },
    "14": {
        "domanda": "Un'azienda decide di organizzare il processo di sviluppo di un grosso software in 101 phasi sequenziali, numerate da 0 a 100. La phase 0 \u00e8 quella iniziale. La phase 100 \u00e8 quella finale in cui lo sviluppo \u00e8 completato. Tutte le fasi hanno circa la stessa durata.\nAlla fine di ogni fase viene eseguita una batteria di tests. I risultati del testing possono essere:\na) si pu\u00f2 passare alla fase successiva;\nb) bisogna ripetere la fase corrente;\nc) bisogna rivedere il lavoro fatto nella fase precedente (reworking).\nDai dati storici \u00e8 noto che la probabilit\u00e0 del caso a) \u00e8 0.72, del caso b) \u00e8 0.18 e del caso c) \u00e8 0.1.\nAllo scopo di stimare attraverso una simulazione MonteCarlo il valore atteso del tempo di completamento del progetto viene realizzato un modello Modelica  del processo di sviluppo descritto sopra.\nQuale dei seguenti modelli Modelica modella correttamente il processo di sviluppo descritto sopra?",
        "scelte": [
            "1.\nblock MarkovChain\n//external function myrandom() returns a random real number in [0, 1]\nparameter Integer x0 = 0;\nparameter Integer xmax = 100;\nOutputInteger x;\nalgorithm\nwhen initial() then\nx := x0;\nelsewhen sample(0, 1) then\nif (x < xmax)\nthen\n   if (myrandom() <= 0.9)\n   then\n     if (myrandom() <= 0.8)\n            then\n            x := x + 1;   \n            else\n            x := max(0, x - 1); \n            end if;\n   else\n   x := max(0, x - 1); \n   end if;\nend if;\nend when;\nend MarkovChain;",
            "2.\nblock MarkovChain\n//external function myrandom() returns a random real number in [0, 1]\nparameter Integer x0 = 0;\nparameter Integer xmax = 100;\nOutputInteger x;\nalgorithm\nwhen initial() then\nx := x0;\nelsewhen sample(0, 1) then\nif (x < xmax)\nthen\n  if (myrandom() <= 0.9)\n   then\n     if (myrandom() <= 0.72)\n            then\n            x := x + 1;   \n            else\n            x := max(0, x - 1); \n            end if;\n     else\n   x := max(0, x - 1); \n   end if;\nend if;\nend when;\nend MarkovChain;",
            "3.\nblock MarkovChain\n//external function myrandom() returns a random real number in [0, 1]\nparameter Integer x0 = 0;\nparameter Integer xmax = 100;\nOutputInteger x;\nalgorithm\nwhen initial() then\nx := x0;\nelsewhen sample(0, 1) then\nif (x < xmax)\nthen\n   if (myrandom() <= 0.8)\n   then\n     if (myrandom() <= 0.9)\n            then\n            x := x + 1;   \n            else\n            x := max(0, x - 1); \n            end if;\n     else\n     x := max(0, x - 1); \n     end if;\nend if;\nend when;\nend MarkovChain;"
        ],
        "risposta": "The correct answer is: block MarkovChain\n//external function myrandom() returns a random real number in [0, 1]\nparameter Integer x0 = 0;\nparameter Integer xmax = 100;\nOutputInteger x;\nalgorithm\nwhen initial() then\nx := x0;\nelsewhen sample(0, 1) then\nif (x < xmax)\nthen\n   if (myrandom() <= 0.9)\n   then\n     if (myrandom() <= 0.8)\n            then\n            x := x + 1;   \n            else\n            x := max(0, x - 1); \n            end if;\n   else\n   x := max(0, x - 1); \n   end if;\nend if;\nend when;\nend MarkovChain;"
    },
    "15": {
        "domanda": "Si consideri il seguente requisito:\nRQ:  Dopo 10 unit\u00e0 di tempo dall'inizio dell'esecuzione vale la seguente propriet\u00e0: se la variabile x \u00e8 nell'intervallo [10, 20]  allora la variabile y \u00e8 compresa tra il 50% di x ed il 70% di x.\nQuale dei seguenti monitor meglio descrive il requisito RQ ?",
        "scelte": [
            "1.\nclass Monitor\n\nInputReal x, y;  // plant output\nOutputBoolean wy;\n\nBoolean wz;\ninitial equation\nwy = false;\nequation\nwz = (time > 10) and ((x < 10) or (x > 20)) and ((y < 0.5*x) or (y > 0.7*x)) ;\nalgorithm\nwhen edge(wz) then\nwy := true;\nend when;\nend Monitor;",
            "2.\nclass Monitor\n\nInputReal x, y;  // plant output\nOutputBoolean wy;\n\nBoolean wz;\ninitial equation\nwy = false;\nequation\nwz = (time > 10) and (x >= 10) and (x <= 20) and (y >= 0.5*x) and (y <= 0.7*x)  ;\nalgorithm\nwhen edge(wz) then\nwy := true;\nend when;\nend Monitor;",
            "3.\nclass Monitor\n\nInputReal x, y;  // plant output\nOutputBoolean wy;\n\nBoolean wz;\ninitial equation\nwy = false;\nequation\nwz = (time > 10) and (x >= 10) and (x <= 20) and ((y < 0.5*x) or (y > 0.7*x)) ;\nalgorithm\nwhen edge(wz) then\nwy := true;\nend when;\nend Monitor;"
        ],
        "risposta": "The correct answer is: class Monitor\n\nInputReal x, y;  // plant output\nOutputBoolean wy;\n\nBoolean wz;\ninitial equation\nwy = false;\nequation\nwz = (time > 10) and (x >= 10) and (x <= 20) and ((y < 0.5*x) or (y > 0.7*x)) ;\nalgorithm\nwhen edge(wz) then\nwy := true;\nend when;\nend Monitor;"
    },
    "16": {
        "domanda": "L'input di un sistema software \u00e8 costituito da una sequenza di valori reali. Ad ogni unit\u00e0 di tempo il valore di input pu\u00f2 rimanere uguale al precedente oppure differire di un numero random in [-1, 1]. L'input resta costante per numero random di unit\u00e0 di tempo in [1, 10].\nQuale dei seguenti modelli Modelica modella meglio l'environment descritto sopra.",
        "scelte": [
            "1.\nblock MarkovChain\n//external function myrandom() returns a random real number in [0, 1]\nparameter Real x0 = 0;\nOutputReal x;\nInteger countdown;\nalgorithm\nwhen initial() then\n  x := x0;\n  countdown := 0;\nelsewhen sample(0, 1) then\n  if (countdown <= 0)\n  then\n    countdown := 1 + integer(floor(10*myrandom()));\n    x := x + (-1 + 2*myrandom());\n  else\n    countdown := countdown - 1;\n  end if;\nend when;\nend MarkovChain;",
            "2.\nblock MarkovChain\n//external function myrandom() returns a random real number in [0, 1]\nparameter Real x0 = 0;\nOutputReal x;\nInteger countdown;\nalgorithm\nwhen initial() then\n  x := x0;\n  countdown := 0;\nelsewhen sample(0, 1) then\n  if (countdown <= 0)\n  then\n    countdown := 1 + integer(floor(10*myrandom()));\n    x := x - myrandom();\n  else\n    countdown := countdown - 1;\n  end if;\nend when;\nend MarkovChain;",
            "3.\nblock MarkovChain\n//external function myrandom() returns a random real number in [0, 1]\nparameter Real x0 = 0;\nOutputReal x;\nInteger countdown;\nalgorithm\nwhen initial() then\n  x := x0;\n  countdown := 0;\nelsewhen sample(0, 1) then\n  if (countdown <= 0)\n  then\n    countdown := 1 + integer(floor(10*myrandom()));\n    x := x + (-1 + 4*myrandom());\n  else\n    countdown := countdown - 1;\n  end if;\nend when;\nend MarkovChain;"
        ],
        "risposta": "The correct answer is: block MarkovChain\n//external function myrandom() returns a random real number in [0, 1]\nparameter Real x0 = 0;\nOutputReal x;\nInteger countdown;\nalgorithm\nwhen initial() then\n  x := x0;\n  countdown := 0;\nelsewhen sample(0, 1) then\n  if (countdown <= 0)\n  then\n    countdown := 1 + integer(floor(10*myrandom()));\n    x := x + (-1 + 2*myrandom());\n  else\n    countdown := countdown - 1;\n  end if;\nend when;\nend MarkovChain;"
    },
    "17": {
        "domanda": "Si consideri il seguente requisito:\nRQ:  Durante l'esecuzione del programma (cio\u00e8 per tutti gli istanti di tempo positivi) la variabile x \u00e8 sempre nell'intervallo [0, 5].\nQuale dei seguenti monitor meglio descrive il requisito RQ ?",
        "scelte": [
            "1.\nclass Monitor\n\nInputReal x;  // plant output\nOutputBoolean y;\n\nBoolean z;\ninitial equation\ny = false;\nequation\nz =  (time > 0) and ((x > 0) or (x < 5));\nalgorithm\nwhen edge(z) then\ny := true;\nend when;\nend Monitor;",
            "2.\nclass Monitor\n\nInputReal x;  // plant output\nOutputBoolean y;\n\nBoolean z;\ninitial equation\ny = false;\nequation\nz = (time > 0) and (x > 0) and (x < 5);\nalgorithm\nwhen edge(z) then\ny := true;\nend when;\nend Monitor;",
            "3.\nclass Monitor\n\nInputReal x;  // plant output\nOutputBoolean y;\n\nBoolean z;\ninitial equation\ny = false;\nequation\nz = (time > 0) and ((x > 5) or (x < 0));\nalgorithm\nwhen edge(z) then\ny := true;\nend when;\nend Monitor;"
        ],
        "risposta": "The correct answer is: class Monitor\n\nInputReal x;  // plant output\nOutputBoolean y;\n\nBoolean z;\ninitial equation\ny = false;\nequation\nz = (time > 0) and ((x > 5) or (x < 0));\nalgorithm\nwhen edge(z) then\ny := true;\nend when;\nend Monitor;"
    },
    "18": {
        "domanda": "La validazione risponde alla seguenete domanda:",
        "scelte": [
            "1.\nSono soddisfatti i requisti funzionali ?",
            "2.\nStiamo costruendo il sistema giusto ?",
            "3.\nStiamo costruendo il sistema nel modo giusto ?"
        ],
        "risposta": "The correct answer is: Stiamo costruendo il sistema giusto ?"
    },
    "19": {
        "domanda": "Si consideri il monitor seguente che ritorna true appena i requisiti per il sistema monitorato sono violati.\nblock Monitor\ninput Real x;  \noutput Boolean y;\nBoolean w;\ninitial equation\ny = false;\nequation\nw = ((x < 0) or (x > 5));\nalgorithm\nwhen edge(w) then\ny := true;\nend when;\nend Monitor;\nQuale delle seguenti affermazioni meglio descrive il requisito monitorato.",
        "scelte": [
            "1.\nLa variabile x \u00e8 nell'intervallo [0, 5].",
            "2.\nLa variable x \u00e8 minore di 0.",
            "3.\nLa variabile x \u00e8 fuori dall'intervallo [0, 5]."
        ],
        "risposta": "The correct answer is: La variabile x \u00e8 nell'intervallo [0, 5]."
    },
    "20": {
        "domanda": "Si consideri il seguente requisito:\nRQ1:  Dopo 20 unit\u00e0 di tempo dall'inizio dell'esecuzione la variabile x \u00e8 sempre nell'intervallo [20, 30] .\nQuale dei seguenti monitor meglio descrive il requisito RQ1 ?",
        "scelte": [
            "1.\nclass Monitor\n\nInputReal x;  // plant output\nOutputBoolean y;\n\nBoolean z;\ninitial equation\ny = false;\nequation\nz = (time > 20) and ((x >= 30) or (x <= 20)) ;\nalgorithm\nwhen edge(z) then\ny := true;\nend when;\nend Monitor;",
            "2.\nclass Monitor\n\nInputReal x;  // plant output\nOutputBoolean y;\n\nBoolean z;\ninitial equation\ny = false;\nequation\nz = (time > 20) and (x >= 20) and (x <= 30) ;\nalgorithm\nwhen edge(z) then\ny := true;\nend when;\nend Monitor;",
            "3.\nclass Monitor\n\nInputReal x;  // plant output\nOutputBoolean y;\n\nBoolean z;\ninitial equation\ny = false;\nequation\nz = (time > 20) or ((x >= 20) and (x <= 30)) ;\nalgorithm\nwhen edge(z) then\ny := true;\nend when;\nend Monitor;"
        ],
        "risposta": "The correct answer is: class Monitor\n\nInputReal x;  // plant output\nOutputBoolean y;\n\nBoolean z;\ninitial equation\ny = false;\nequation\nz = (time > 20) and ((x >= 30) or (x <= 20)) ;\nalgorithm\nwhen edge(z) then\ny := true;\nend when;\nend Monitor;"
    },
    "21": {
        "domanda": "L'input ad un sistema \u00e8 costituito da un utente (umano) che preme due pulsanti etichettati, rispettivamente, con 1 ed 2.\nL'utente pu\u00f2 anche decidere di non premere alcun pulsante.\nCon probabilit\u00e0 0.2 l'utente preme il pulsante 1, con probabilit\u00e0 0.3 l'utente preme il pulsante 2, con probabilit\u00e0 0.5 non fa nulla (pulsante 0 per convenzione).\nQuale dei seguenti modelli Modelica fornisce un modello ragionevole per l'utente di cui sopra?",
        "scelte": [
            "1.\nmodel Env\nInteger x;  // Pulsante premuto dall'utente (0 nessun pulsante)\nReal r1024;\nInteger state1024[Modelica.Math.Random.Generators.Xorshift1024star.nState];\nalgorithm\nwhen initial() then\n   state1024 := Modelica.Math.Random.Generators.Xorshift1024star.initialState(614657, 30020);\n   x := 0;\n   r1024 := 0;\nelsewhen sample(0,1) then\n  (r1024,state1024) := Modelica.Math.Random.Generators.Xorshift1024star.random(pre(state1024));\n  if (r1024 <= 0.5)\n  then x := 0; \n  else\n         (r1024,state1024) := Modelica.Math.Random.Generators.Xorshift1024star.random(pre(state1024));\n         if   (r1024 <= 0.4)   then x := 1;   else x:= 0; end if;\n  end if;\nend when;\nend Env;",
            "2.\nmodel Env\nInteger x;  // Pulsante premuto dall'utente (0 nessun pulsante)\nReal r1024;\nInteger state1024[Modelica.Math.Random.Generators.Xorshift1024star.nState];\nalgorithm\nwhen initial() then\n   state1024 := Modelica.Math.Random.Generators.Xorshift1024star.initialState(614657, 30020);\n   x := 0;\n   r1024 := 0;\nelsewhen sample(0,1) then\n  (r1024,state1024) := Modelica.Math.Random.Generators.Xorshift1024star.random(pre(state1024));\n  if (r1024 <= 0.5)\n  then x := 0; \n  else\n         (r1024,state1024) := Modelica.Math.Random.Generators.Xorshift1024star.random(pre(state1024));\n         if   (r1024 <= 0.3)   then x := 0;   else x:= 1; end if;\n  end if;\nend when;\nend Env;",
            "3.\nmodel Env\nInteger x;  // Pulsante premuto dall'utente (0 nessun pulsante)\nReal r1024;\nInteger state1024[Modelica.Math.Random.Generators.Xorshift1024star.nState];\nalgorithm\nwhen initial() then\n   state1024 := Modelica.Math.Random.Generators.Xorshift1024star.initialState(614657, 30020);\n   x := 0;\n   r1024 := 0;\nelsewhen sample(0,1) then\n  (r1024,state1024) := Modelica.Math.Random.Generators.Xorshift1024star.random(pre(state1024));\n  if (r1024 <= 0.5)\n  then x := 0; \n  else\n         (r1024,state1024) := Modelica.Math.Random.Generators.Xorshift1024star.random(pre(state1024));\n         if   (r1024 <= 0.2)   then x := 1;   else x:= 0; end if;\n  end if;\nend when;\nend Env;"
        ],
        "risposta": "The correct answer is: model Env\n\nInteger x;  // Pulsante premuto dall'utente (0 nessun pulsante)\n\nReal r1024;\nInteger state1024[Modelica.Math.Random.Generators.Xorshift1024star.nState];\nalgorithm\n\nwhen initial() then\n\n   state1024 := Modelica.Math.Random.Generators.Xorshift1024star.initialState(614657, 30020);\n   x := 0;\n   r1024 := 0;\nelsewhen sample(0,1) then\n  (r1024,state1024) := Modelica.Math.Random.Generators.Xorshift1024star.random(pre(state1024));\n  if (r1024 <= 0.5)\n\n  then x := 0; \n\n  else\n\n         (r1024,state1024) := Modelica.Math.Random.Generators.Xorshift1024star.random(pre(state1024));\n\n         if   (r1024 <= 0.4)   then x := 1;   else x:= 0; end if;\n\n  end if;\nend when;\n\nend Env;"
    },
    "22": {
        "domanda": "Il system testing si concentra su:",
        "scelte": [
            "1.\nTestare l'interazione tra  le componenti del sistema (cio\u00e8, integrazione di molte unit\u00e0 di sistema).",
            "2.\nTestare le funzionalit\u00e0 di unit\u00e0 software individuali, oggetti, classi o metodi.",
            "3.\nTestare le interfacce per ciascuna componente."
        ],
        "risposta": "The correct answer is: Testare l'interazione tra  le componenti del sistema (cio\u00e8, integrazione di molte unit\u00e0 di sistema)."
    },
    "23": {
        "domanda": "Si consideri il seguente requisito:\nRQ:  Dopo 50 unit\u00e0 di tempo dall'inizio dell'esecuzione vale la seguente propriet\u00e0:\nse la variabile x \u00e8 minore del 60% della variabile y allora la somma di x ed y \u00e8 maggiore del 30% della variabile z\nQuale dei seguenti monitor meglio descrive il requisito RQ ?",
        "scelte": [
            "1.\nclass Monitor\n\nInputReal x, y, z;  // plant output\nOutputBoolean wy;\nBoolean wz;\ninitial equation\nwy = false;\nequation\nwz = (time > 50) and (x >= 0.6*y) and (x + y <= 0.3*z);\nalgorithm\nwhen edge(wz) then\nwy := true;\nend when;\nend Monitor;",
            "2.\n\nclass Monitor\n\nInputReal x, y, z;  // plant output\nOutputBoolean wy;\nBoolean wz;\ninitial equation\nwy = false;\nequation\nwz = (time > 50) and (x < 0.6*y) and (x + y > 0.3*z);\nalgorithm\nwhen edge(wz) then\nwy := true;\nend when;\nend Monitor;",
            "3.\nclass Monitor\n\nInputReal x, y, z;  // plant output\nOutputBoolean wy;\nBoolean wz;\ninitial equation\nwy = false;\nequation\nwz = (time > 50) and (x < 0.6*y) and (x + y <= 0.3*z);\nalgorithm\nwhen edge(wz) then\nwy := true;\nend when;\nend Monitor;"
        ],
        "risposta": "The correct answer is: class Monitor\n\nInputReal x, y, z;  // plant output\nOutputBoolean wy;\nBoolean wz;\ninitial equation\nwy = false;\nequation\nwz = (time > 50) and (x < 0.6*y) and (x + y <= 0.3*z);\nalgorithm\nwhen edge(wz) then\nwy := true;\nend when;\nend Monitor;"
    },
    "24": {
        "domanda": "Si consideri il seguente requisito:\nRQ:  Dopo 60 unit\u00e0 di tempo dall'inizio dell'esecuzione vale la seguente propriet\u00e0:\nse 10 unit\u00e0 di tempo nel passato era stata richiesta una risorsa (variabile x positiva) allora ora \u00e8 concesso l'accesso alla risorsa (variabile y positiva)\nTenendo presente che, al tempo time, delay(z, w) ritorna 0 se time < w e ritorna il valore che z aveva al tempo (time - w), se time >= w.\nQuale dei seguenti monitor meglio descrive il requisito RQ ?",
        "scelte": [
            "1.\nclass Monitor\nInputReal x, y; \nOutputBoolean wy;\nBoolean wz;\ninitial equation\nwy = false;\nequation\nwz = (time > 60) and (delay(x, 10) > 0) and (y <= 0);\nalgorithm\nwhen edge(wz) then\nwy := true;\nend when;\nend Monitor;",
            "2.\nclass Monitor\nInputReal x, y; \nOutputBoolean wy;\nBoolean wz;\ninitial equation\nwy = false;\nequation\nwz = (time > 60) and (delay(x, 10) > 0) and (y > 0);\nalgorithm\nwhen edge(wz) then\nwy := true;\nend when;\nend Monitor;",
            "3.\nclass Monitor\nInputReal x, y; \nOutputBoolean wy;\nBoolean wz;\ninitial equation\nwy = false;\nequation\nwz = (time > 60) or (delay(x, 10) > 0) or  (y <= 0);\n\nalgorithm\nwhen edge(wz) then\nwy := true;\nend when;\nend Monitor;"
        ],
        "risposta": "The correct answer is: class Monitor\nInputReal x, y; \nOutputBoolean wy;\nBoolean wz;\ninitial equation\nwy = false;\nequation\nwz = (time > 60) and (delay(x, 10) > 0) and (y <= 0);\nalgorithm\nwhen edge(wz) then\nwy := true;\nend when;\nend Monitor;"
    },
    "25": {
        "domanda": "Quale delle seguenti affermazioni \u00e8 vera riguardo al performance testing?",
        "scelte": [
            "1.\nIl performance testing \u00e8 tipicamente eseguito una volta che il sistema \u00e8 stato completamento integrato.",
            "2.\nIl performance testing \u00e8 tipicamente eseguito solo sulle componenti del sistema prima dell'integrazione.",
            "3.\nIl performance testing \u00e8 tipicamente eseguito su un prototipo del sistema."
        ],
        "risposta": "The correct answer is: Il performance testing \u00e8 tipicamente eseguito una volta che il sistema \u00e8 stato completamento integrato."
    },
    "26": {
        "domanda": "Si consideri il seguente modello Modelica:\nclass System\nInteger x;\ninitial equation\nx = 0;\nequation\nwhen sample(0, 2) then\n    x = 1 - pre(x);\nend when;\nend System;\nQuale delle seguenti affermazioni \u00e8 vera per la variabile intera x?",
        "scelte": [
            "1.\nPer tutti gli istanti di tempo della forma 1 + 4*k (con k = 0, 1, 2, 3, ...) x vale 1.",
            "2.\nPer tutti gli istanti di tempo della forma  3 + 4*k (con k = 0, 1, 2, 3, ...) x vale 1.",
            "3.\nPer tutti gli istanti di tempo della forma 1 + 4*k (con k = 0, 1, 2, 3, ...) x vale 0."
        ],
        "risposta": "The correct answer is: Per tutti gli istanti di tempo della forma 1 + 4*k (con k = 0, 1, 2, 3, ...) x vale 1."
    },
    "27": {
        "domanda": "Si consideri il seguente requisito:\nRQ1:  Durante l'esecuzione del programma (cio\u00e8 per tutti gli istanti di tempo positivi) la variabile x \u00e8 sempre nell'intervallo [0, 5] oppure [10, 15]\nQuale dei seguenti monitor meglio descrive il requisito RQ1 ?",
        "scelte": [
            "1.\nclass Monitor\n\nInputReal x;  // plant output\nOutputBoolean y;\n\nBoolean z;\ninitial equation\ny = false;\nequation\nz = (time > 0) and ( ((x >= 0) and (x <= 5))  or ((x >= 10) and (x <= 15)) );\nalgorithm\nwhen edge(z) then\ny := true;\nend when;\nend Monitor;",
            "2.\nclass Monitor\n\nInputReal x;  // plant output\nOutputBoolean y;\n\nBoolean z;\ninitial equation\ny = false;\nequation\nz = (time > 0) and ((x >= 0) or (x <= 5))  and  ((x >= 10) or (x <= 15)) );\nalgorithm\nwhen edge(z) then\ny := true;\nend when;\nend Monitor;",
            "3.\nclass Monitor\n\nInputReal x;  // plant output\nOutputBoolean y;\n\nBoolean z;\ninitial equation\ny = false;\nequation\nz = (time > 0) and ((x >= 5) or (x <= 0))  and  ((x >= 15) or (x <= 10)) ;\nalgorithm\nwhen edge(z) then\ny := true;\nend when;\nend Monitor;"
        ],
        "risposta": "The correct answer is: class Monitor\n\nInputReal x;  // plant output\nOutputBoolean y;\n\nBoolean z;\ninitial equation\ny = false;\nequation\nz = (time > 0) and ((x >= 5) or (x <= 0))  and  ((x >= 15) or (x <= 10)) ;\nalgorithm\nwhen edge(z) then\ny := true;\nend when;\nend Monitor;"
    },
    "28": {
        "domanda": "Si consideri l'ambiente (use case) consistente di un utente che ad ogni unit\u00e0 di tempo (ad esempio, un secondo) invia al nostro sistema input -1 con probabilit\u00e0 0.2, input 0 con probabilit\u00e0 0.5 ed input 1 con probabilit\u00e0 0.3. Quale dei seguenti modelli Modelica rappresenta correttamente tale ambiente.",
        "scelte": [
            "1.\n\nmodel System\nInteger y;  Real r1024;\nInteger state1024[Modelica.Math.Random.Generators.Xorshift1024star.nState];\nequation\ny = if (r1024 <= 0.2) then -1 else if (r1024 <= 0.5) then 0 else 1;\nalgorithm\nwhen initial() then\nstate1024 := Modelica.Math.Random.Generators.Xorshift1024star.initialState(614657, 30020);\nr1024     := 0;\nelsewhen sample(0,1) then\n(r1024,state1024) := Modelica.Math.Random.Generators.Xorshift1024star.random(pre(state1024));\nend when;\nend System;",
            "2.\n\nmodel System\nInteger y;  Real r1024;\nInteger state1024[Modelica.Math.Random.Generators.Xorshift1024star.nState];\nequation\ny = if (r1024 <= 0.2) then -1 else if (r1024 <= 0.7) then 0 else 1;\nalgorithm\nwhen initial() then\nstate1024 := Modelica.Math.Random.Generators.Xorshift1024star.initialState(614657, 30020);\nr1024     := 0;\nelsewhen sample(0,1) then\n(r1024,state1024) := Modelica.Math.Random.Generators.Xorshift1024star.random(pre(state1024));\nend when;\nend System;",
            "3.\n\nmodel System\nInteger y;  Real r1024;\nInteger state1024[Modelica.Math.Random.Generators.Xorshift1024star.nState];\nequation\ny = if (r1024 <= 0.3) then -1 else if (r1024 <= 0.7) then 0 else 1;\nalgorithm\nwhen initial() then\nstate1024 := Modelica.Math.Random.Generators.Xorshift1024star.initialState(614657, 30020);\nr1024     := 0;\nelsewhen sample(0,1) then\n(r1024,state1024) := Modelica.Math.Random.Generators.Xorshift1024star.random(pre(state1024));\nend when;\nend System;"
        ],
        "risposta": "The correct answer is:\n\nmodel System\n\nInteger y;  Real r1024;\nInteger state1024[Modelica.Math.Random.Generators.Xorshift1024star.nState];\nequation\ny = if (r1024 <= 0.2) then -1 else if (r1024 <= 0.7) then 0 else 1;\nalgorithm\nwhen initial() then\nstate1024 := Modelica.Math.Random.Generators.Xorshift1024star.initialState(614657, 30020);\nr1024     := 0;\nelsewhen sample(0,1) then\n(r1024,state1024) := Modelica.Math.Random.Generators.Xorshift1024star.random(pre(state1024));\nend when;\nend System;"
    },
    "29": {
        "domanda": "Si consideri il Test-Driven Development (TDD). Quale delle seguenti affermazioni \u00e8 vera?",
        "scelte": [
            "1.\nPer ciascun incremento di funzionalit\u00e0, scrivi test automatizzati, implementa la funzionalit\u00e0, esegui i test e rivedi l'implementazione come necessario.",
            "2.\nScrivi test automatizzati per tutti i requisiti di sistema, esegui i test e rivedi l'implementazione come necessario.",
            "3.\nPer ciascun incremento di funzionalit\u00e0, implementa la funzionalit\u00e0, scrivi test automatizzati, esegui i test e rivedi l'implementazione come necessario."
        ],
        "risposta": "The correct answer is: Per ciascun incremento di funzionalit\u00e0, scrivi test automatizzati, implementa la funzionalit\u00e0, esegui i test e rivedi l'implementazione come necessario."
    },
    "30": {
        "domanda": "Una azienda finanziaria desidera costruire un sistema software per ottimizzare i processi di business. Quali delle seguenti attivit\u00e0 pu\u00f2 contribuire a validare i requisiti del sistema ?",
        "scelte": [
            "1.\nCostruire un prototipo del sistema e testarlo rispetto ai requisiti funzionali usando i dati storici dall'azienda.",
            "2.\nCostruire un modello di simulazione per i principali aspetti dei processi di business dell'azienda e per il sistema software da realizzare e valutare le migliorie apportate dal sistema software ai processi di business dell'azienda mediante simulazione.",
            "3.\nCostruire un prototipo del sistema e valutarne i requisiti non funzionali usando i dati storici dall'azienda."
        ],
        "risposta": "The correct answer is: Costruire un modello di simulazione per i principali aspetti dei processi di business dell'azienda e per il sistema software da realizzare e valutare le migliorie apportate dal sistema software ai processi di business dell'azienda mediante simulazione."
    },
    "31": {
        "domanda-immagine": "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\n",
        "domanda": "Si consideri la seguente Markov Chain:\n\n\nQuale dei seguenti modelli Modelica fornisce un modello ragionevole per la Markov Chain di cui sopra?",
        "scelte": [
            "1.\nmodel System\nparameter Integer F1 = 1;\nparameter Integer F2 = 2;\nparameter Integer F3 = 3;\nparameter Integer End = 4;\nparameter Real p = 0.3;\nparameter Real A[4, 4] =\n[\n0, 1, 0, 0;\np, 1-p, 0, 0;\n0, 0, p, 1-p;\n0, 0, 0, 1\n];\nInteger x;  Real r1024;\nInteger state1024[Modelica.Math.Random.Generators.Xorshift1024star.nState];\nalgorithm\nwhen initial() then\nstate1024 := Modelica.Math.Random.Generators.Xorshift1024star.initialState(614657, 30020);\nx := F1;\nr1024 := 0;\nelsewhen sample(0,1) then\n(r1024,state1024) := Modelica.Math.Random.Generators.Xorshift1024star.random(pre(state1024));\nif (r1024 <= A[x, F1]) then\n x := F1;\n elseif (r1024 <= A[x, F1] + A[x, F2]) then\n x := F2;\n elseif (r1024 <= A[x, F1] + A[x, F2] + A[x, F3]) then\n x := F3;\n else\n x := End;\nend if;\nend when;\nend System;",
            "2.\nmodel System\nparameter Integer F1 = 1;\nparameter Integer F2 = 2;\nparameter Integer F3 = 3;\nparameter Integer End = 4;\nparameter Real p = 0.3;\nparameter Real A[4, 4] =\n[\n0, 1, 0, 0;\np, 0, 0, 1-p;\n0, 0, p, 1-p;\n0, 0, 0, 1\n];\nInteger x;  Real r1024;\nInteger state1024[Modelica.Math.Random.Generators.Xorshift1024star.nState];\nalgorithm\nwhen initial() then\nstate1024 := Modelica.Math.Random.Generators.Xorshift1024star.initialState(614657, 30020);\nx := F1;\nr1024 := 0;\nelsewhen sample(0,1) then\n(r1024,state1024) := Modelica.Math.Random.Generators.Xorshift1024star.random(pre(state1024));\nif (r1024 <= A[x, F1]) then\n x := F1;\n elseif (r1024 <= A[x, F1] + A[x, F2]) then\n x := F2;\n elseif (r1024 <= A[x, F1] + A[x, F2] + A[x, F3]) then\n x := F3;\n else\n x := End;\nend if;\nend when;\nend System;",
            "3.\n\nmodel System\nparameter Integer F1 = 1;\nparameter Integer F2 = 2;\nparameter Integer F3 = 3;\nparameter Integer End = 4;\nparameter Real p = 0.3;\nparameter Real A[4, 4] =\n[\n0, 1, 0, 0;\np, 0, 1-p, 0;\n0, p, 0, 1-p;\n0, 0, 0, 1\n];\nInteger x;  Real r1024;\nInteger state1024[Modelica.Math.Random.Generators.Xorshift1024star.nState];\nalgorithm\nwhen initial() then\n   state1024 := Modelica.Math.Random.Generators.Xorshift1024star.initialState(614657, 30020);\n   x := F1;\n   r1024 := 0;\nelsewhen sample(0,1) then\n(r1024,state1024) := Modelica.Math.Random.Generators.Xorshift1024star.random(pre(state1024));\nif (r1024 <= A[x, F1]) then\n x := F1;\n elseif (r1024 <= A[x, F1] + A[x, F2]) then\n x := F2;\n elseif (r1024 <= A[x, F1] + A[x, F2] + A[x, F3]) then\n x := F3;\n else\n x := End;\nend if;\nend when;\nend System;"
        ],
        "risposta": "The correct answer is:\n\nmodel System\nparameter Integer F1 = 1;\n\nparameter Integer F2 = 2;\nparameter Integer F3 = 3;\nparameter Integer End = 4;\nparameter Real p = 0.3;\nparameter Real A[4, 4] =\n\n[\n0, 1, 0, 0;\np, 0, 1-p, 0;\n0, p, 0, 1-p;\n0, 0, 0, 1\n];\n\nInteger x;  Real r1024;\nInteger state1024[Modelica.Math.Random.Generators.Xorshift1024star.nState];\nalgorithm\n\nwhen initial() then\n\n   state1024 := Modelica.Math.Random.Generators.Xorshift1024star.initialState(614657, 30020);\n   x := F1;\n   r1024 := 0;\nelsewhen sample(0,1) then\n(r1024,state1024) := Modelica.Math.Random.Generators.Xorshift1024star.random(pre(state1024));\nif (r1024 <= A[x, F1]) then\n\n x := F1;\n elseif (r1024 <= A[x, F1] + A[x, F2]) then\n x := F2;\n elseif (r1024 <= A[x, F1] + A[x, F2] + A[x, F3]) then\n x := F3;\n else\n x := End;\nend if;\nend when;\n\nend System;"
    },
    "32": {
        "domanda": "L'input ad un sistema \u00e8 costituito da un utente (umano) che preme due pulsanti etichettati con 0 ed 1.\nCon probabilit\u00e0 0.6 l'utente preme il pulsante 0, con probabilit\u00e0 0.4 l'utente preme il pulsante 1.\nQuale dei seguenti modelli Modelica fornisce un modello ragionevole per l'utente di cui sopra?",
        "scelte": [
            "1.\nmodel Env\nInteger x;  // Pulsante premuto dall'utente\nReal r1024;\nInteger state1024[Modelica.Math.Random.Generators.Xorshift1024star.nState];\nalgorithm\nwhen initial() then\n   state1024 := Modelica.Math.Random.Generators.Xorshift1024star.initialState(614657, 30020);\n   x := 0;\n   r1024 := 0;\nelsewhen sample(0,1) then\n  (r1024,state1024) := Modelica.Math.Random.Generators.Xorshift1024star.random(pre(state1024));\n  if (r1024 >= 0.6) then x := 0; else x := 1;  end if;\nend when;\nend Env;",
            "2.\nmodel Env\nInteger x;  // Pulsante premuto dall'utente\nReal r1024;\nInteger state1024[Modelica.Math.Random.Generators.Xorshift1024star.nState];\nalgorithm\nwhen initial() then\n   state1024 := Modelica.Math.Random.Generators.Xorshift1024star.initialState(614657, 30020);\n   x := 0;\n   r1024 := 0;\nelsewhen sample(0,1) then\n  (r1024,state1024) := Modelica.Math.Random.Generators.Xorshift1024star.random(pre(state1024));\n  if (r1024 <= 0.6) then x := 1; else x := 0;  end if;\nend when;\nend Env;",
            "3.\nmodel Env\nInteger x;  // Pulsante premuto dall'utente\nReal r1024;\nInteger state1024[Modelica.Math.Random.Generators.Xorshift1024star.nState];\nalgorithm\nwhen initial() then\n   state1024 := Modelica.Math.Random.Generators.Xorshift1024star.initialState(614657, 30020);\n   x := 0;\n   r1024 := 0;\nelsewhen sample(0,1) then\n  (r1024,state1024) := Modelica.Math.Random.Generators.Xorshift1024star.random(pre(state1024));\n  if (r1024 <= 0.6) then x := 0; else x := 1;  end if;\nend when;\nend Env;"
        ],
        "risposta": "The correct answer is: model Env\n\nInteger x;  // Pulsante premuto dall'utente\n\nReal r1024;\nInteger state1024[Modelica.Math.Random.Generators.Xorshift1024star.nState];\nalgorithm\n\nwhen initial() then\n\n   state1024 := Modelica.Math.Random.Generators.Xorshift1024star.initialState(614657, 30020);\n   x := 0;\n   r1024 := 0;\nelsewhen sample(0,1) then\n  (r1024,state1024) := Modelica.Math.Random.Generators.Xorshift1024star.random(pre(state1024));\n  if (r1024 <= 0.6) then x := 0; else x := 1;  end if;\nend when;\n\nend Env;"
    },
    "33": {
        "domanda": "Quali delle seguenti attivit\u00e0 pu\u00f2 contribuire a validare i requisiti di un sistema ?",
        "scelte": [
            "1.\nCostruire un prototipo e testarlo a fondo per evidenziare subito errori di implementazione.",
            "2.\nCostruire un prototipo, metterlo in esercizio ed accertarsi che i porti i benefici attesi.",
            "3.\nCostruire un prototipo e valutarne attentamente le performance."
        ],
        "risposta": "The correct answer is: Costruire un prototipo, metterlo in esercizio ed accertarsi che i porti i benefici attesi."
    },
    "34": {
        "domanda": "Si consideri il monitor seguente che ritorna true appena il sistema viola il requisito monitorato.\nblock Monitor\ninput Real x;  \noutput Boolean y;\nBoolean w;\ninitial equation\ny = false;\nequation\nw = ((x < 1) or (x > 4)) and ((x < 15) or (x > 20));\nalgorithm\nwhen edge(w) then\ny := true;\nend when;\nend Monitor;\nQuale delle seguenti affermazioni meglio descrive il requisito monitorato?",
        "scelte": [
            "1.\nLa variabile x \u00e8 nell'intervallo [1, 4] e fuori dall'intervallo [15, 20].",
            "2.\nLa variabile x \u00e8 fuori dall'intervallo [1, 4] e fuori dall'intervallo [15, 20].",
            "3.\nLa variabile x \u00e8 nell'intervallo [1, 4] oppure nell'intervallo [15, 20]."
        ],
        "risposta": "The correct answer is: La variabile x \u00e8 nell'intervallo [1, 4] oppure nell'intervallo [15, 20]."
    },
    "35": {
        "domanda": "Si consideri l'ambiente (use case) che consiste di un utente che, ad ogni unit\u00e0 di tempo (ad esempio, un secondo) manda al nostro sistema input 1 (ad esempio, esegue una prenotazione) con probabilit\u00e0 0.3 oppure input 0 con probabilit\u00e0 0.7. Quale dei seguenti modelli Modelica rappresenta correttamente tale ambiente.",
        "scelte": [
            "1.\n\nmodel System\nInteger y;  Real r1024;\nInteger state1024[Modelica.Math.Random.Generators.Xorshift1024star.nState];\nequation\ny = if (r1024 >= 0.3) then 1 else 0;\nalgorithm\nwhen initial() then\nstate1024 := Modelica.Math.Random.Generators.Xorshift1024star.initialState(614657, 30020);\nr1024     := 0;\nelsewhen sample(0,1) then\n(r1024,state1024) := Modelica.Math.Random.Generators.Xorshift1024star.random(pre(state1024));\nend when;\nend System;",
            "2.\n\nmodel System\nInteger y;  Real r1024;\nInteger state1024[Modelica.Math.Random.Generators.Xorshift1024star.nState];\nequation\ny = if (r1024 <= 0.3) then 0 else 1;\nalgorithm\nwhen initial() then\nstate1024 := Modelica.Math.Random.Generators.Xorshift1024star.initialState(614657, 30020);\nr1024     := 0;\nelsewhen sample(0,1) then\n(r1024,state1024) := Modelica.Math.Random.Generators.Xorshift1024star.random(pre(state1024));\nend when;\nend System;",
            "3.\n\nmodel System\nInteger y;\nReal r1024;\nInteger state1024[Modelica.Math.Random.Generators.Xorshift1024star.nState];\nequation\ny = if (r1024 <= 0.3) then 1 else 0;\nalgorithm\nwhen initial() then\nstate1024 := Modelica.Math.Random.Generators.Xorshift1024star.initialState(614657, 30020);\nr1024     := 0;\nelsewhen sample(0,1) then\n(r1024,state1024) := Modelica.Math.Random.Generators.Xorshift1024star.random(pre(state1024));\nend when;\nend System;"
        ],
        "risposta": "The correct answer is:\n\nmodel System\n\nInteger y;\nReal r1024;\nInteger state1024[Modelica.Math.Random.Generators.Xorshift1024star.nState];\nequation\n\ny = if (r1024 <= 0.3) then 1 else 0;\nalgorithm\n\nwhen initial() then\nstate1024 := Modelica.Math.Random.Generators.Xorshift1024star.initialState(614657, 30020);\nr1024     := 0;\nelsewhen sample(0,1) then\n(r1024,state1024) := Modelica.Math.Random.Generators.Xorshift1024star.random(pre(state1024));\nend when;\nend System;"
    },
    "36": {
        "domanda": "L'input di un sistema software \u00e8 costituito da un sensore che ogni unit\u00e0 di tempo (ad esempio, un secondo) invia un numero reale. Con probabilit\u00e0 0.63 il valore inviato in una unit\u00e0 di tempo \u00e8 maggiore del 10% rispetto quello inviato nell'unit\u00e0 di tempo precedente. Con probabilit\u00e0 0.1 \u00e8 inferiore del 27% rispetto al valore inviato nell'unit\u00e0 di tempo precedente. Con probabilit\u00e0 0.27 \u00e8 inferiore del 10% rispetto quello inviato nell'unit\u00e0 di tempo precedente.\nQuale dei seguenti modelli Modelica modella correttamente l'environment descritto sopra.",
        "scelte": [
            "1.\nblock MarkovChain\n//external function myrandom() returns a random real number in [0, 1]\nparameter Real x0 = 1;\nOutputReal x;\nalgorithm\nwhen initial() then\nx := x0;\nelsewhen sample(0, 1) then\nif (myrandom() <= 0.9)\nthen\n    if (myrandom() <= 0.7)\n    then\n     x := 1.1*x;   \n    else\n     x := 0.9*x; \n     end if;\nelse\n   x := 0.73*x; \nend if;\nend when;\nend MarkovChain;",
            "2.\nblock MarkovChain\n//external function myrandom() returns a random real number in [0, 1]\nparameter Real x0 = 1;\nOutputReal x;\nalgorithm\nwhen initial() then\nx := x0;\nelsewhen sample(0, 1) then\nif (myrandom() <= 0.7)\nthen\n    if (myrandom() <= 0.9)\n    then\n     x := 1.1*x;   \n    else\n     x := 0.9*x; \n     end if;\nelse\n   x := 0.73*x; \nend if;\nend when;\nend MarkovChain;",
            "3.\nblock MarkovChain\n//external function myrandom() returns a random real number in [0, 1]\nparameter Real x0 = 1;\nOutputReal x;\nalgorithm\nwhen initial() then\nx := x0;\nelsewhen sample(0, 1) then\nif (myrandom() <= 0.9)\nthen\n    if (myrandom() <= 0.7)\n    then\n     x := 0.9*x;   \n    else\n     x := 01.1*x; \n     end if;\nelse\n   x := 0.73*x; \nend if;\nend when;\nend MarkovChain;"
        ],
        "risposta": "The correct answer is: block MarkovChain\n//external function myrandom() returns a random real number in [0, 1]\nparameter Real x0 = 1;\nOutputReal x;\nalgorithm\nwhen initial() then\nx := x0;\nelsewhen sample(0, 1) then\nif (myrandom() <= 0.9)\nthen\n    if (myrandom() <= 0.7)\n    then\n     x := 1.1*x;   \n    else\n     x := 0.9*x; \n     end if;\nelse\n   x := 0.73*x; \nend if;\nend when;\nend MarkovChain;"
    },
    "37": {
        "domanda": "Una azienda manifatturiera desidera costruire un sistema software per monitorare (attraverso sensori) la produzione al fine di ridurre gli scarti. Quali delle seguenti attivit\u00e0 contribuisce a validare i requisiti del sistema.",
        "scelte": [
            "1.\nCostruire un prototipo, eseguirlo usando dati storici dai log di produzione e valutare la capacit\u00e0 del prototipo di ridurre gli scarti.",
            "2.\nCostruire un prototipo, eseguirlo usando dati storici dai log di produzione e valutarne le performance.",
            "3.\nCostruire un prototipo, eseguirlo usando dati storici dai log di produzione ed identificare errori di implementazione."
        ],
        "risposta": "The correct answer is: Costruire un prototipo, eseguirlo usando dati storici dai log di produzione e valutare la capacit\u00e0 del prototipo di ridurre gli scarti."
    },
    "38": {
        "domanda": "L'environment di un sistema software \u00e8 costituito da uno user che, ogni unti\u00e0 di tempo (ad esempio, un secondo) invia al sistema tre numeri: -1, 0, 1, con probabilit\u00e0, rispettivamente, 0.2, 0.56, 0.24.\nQuale dei seguenti modelli Modelica modella correttamente l'environment descritto sopra.",
        "scelte": [
            "1.\nblock MarkovChain\n//external function myrandom() returns a random real number in [0, 1]\nparameter Integer x0 = 0;\nOutputInteger x;\nalgorithm\nwhen initial() then\nx := x0;\nelsewhen sample(0, 1) then\n     if (myrandom() <= 0.8)\n     then\n     if (myrandom() <= 0.7)\n            then\n            x := 1;   \n            else\n            x := 0; \n            end if;\n     else\n     x := -1; \n     end if;\nend when;\nend MarkovChain;",
            "2.\nblock MarkovChain\n//external function myrandom() returns a random real number in [0, 1]\nparameter Integer x0 = 0;\nOutputInteger x;\nalgorithm\nwhen initial() then\nx := x0;\nelsewhen sample(0, 1) then\n     if (myrandom() <= 0.8)\n     then\n     if (myrandom() <= 0.7)\n            then\n            x := 0;   \n            else\n            x := 1; \n            end if;\n     else\n     x := -1; \n     end if;\nend when;\nend MarkovChain;",
            "3.\nblock MarkovChain\n//external function myrandom() returns a random real number in [0, 1]\nparameter Integer x0 = 0;\nOutputInteger x;\nalgorithm\nwhen initial() then\nx := x0;\nelsewhen sample(0, 1) then\n     if (myrandom() <= 0.7)\n     then\n     if (myrandom() <= 0.8)\n            then\n               x := 0;   \n            else\n               x := 1; \n            end if;\n     else\n     x := -1; \n     end if;\nend when;\nend MarkovChain;"
        ],
        "risposta": "The correct answer is: block MarkovChain\n//external function myrandom() returns a random real number in [0, 1]\nparameter Integer x0 = 0;\nOutputInteger x;\nalgorithm\nwhen initial() then\nx := x0;\nelsewhen sample(0, 1) then\n     if (myrandom() <= 0.8)\n     then\n     if (myrandom() <= 0.7)\n            then\n            x := 0;   \n            else\n            x := 1; \n            end if;\n     else\n     x := -1; \n     end if;\nend when;\nend MarkovChain;"
    },
    "39": {
        "domanda": "Quali delle seguenti attivit\u00e0 \u00e8 parte del processo di validazione dei requisiti ?",
        "scelte": [
            "1.\nAccertarsi che il sistema soddisfi i requisiti dati. ",
            "2.\nAccertarsi che l'architettura del sistema soddisfi i requisiti dati. ",
            "3.\nAccertarsi che i requisiti definiscano un sistema che risolve il problema che l'utente pianifica di risolvere."
        ],
        "risposta": "The correct answer is: Accertarsi che i requisiti definiscano un sistema che risolve il problema che l'utente pianifica di risolvere."
    }
}